---
- name: "{{ repo }}: Reset diff output list"
  set_fact:
    restic_diffs: []

- name: "{{ repo }}: Check src folder {{ src }}"
  stat:
    path: "{{ src }}"
  register: src_result
  failed_when: not (src_result.stat.exists and src_result.stat.isdir is defined and src_result.stat.isdir)

- name: "{{ repo }}: Check repo base folder {{ repo_base }}"
  stat:
    path: "{{ repo_base }}"
  register: repo_base_result

- block:
    - name: "{{ repo }}: Check restic repo config"
      shell: restic cat config
      environment:
        RESTIC_REPOSITORY: "{{ repo }}"
        RESTIC_PASSWORD: "{{ restic_password }}"
      register: cat_result
      changed_when: cat_result.rc != 0
      failed_when: cat_result.rc != 0 and not ("no such file or directory" in cat_result.stderr)

    - name: "{{ repo }}: Create repo if it doesn't exist"
      shell: restic init
      environment:
        RESTIC_REPOSITORY: "{{ repo }}"
        RESTIC_PASSWORD: "{{ restic_password }}"
      when: cat_result.rc == 1 and ("no such file or directory" in cat_result.stderr)

    - name: "{{ repo }}: Dry run"
      shell: restic -vv --json backup --dry-run {{ restic_excludes_params }} {{ src }} | jq -rc 'select(.message_type == "verbose_status" and .action != "unchanged")'
      environment:
        RESTIC_REPOSITORY: "{{ repo }}"
        RESTIC_PASSWORD: "{{ restic_password }}"
      register: dryrun_result

    - name: "{{ repo }}: Parse dry run output"
      vars:
        restic_status: "{{ restic_stdout_line | from_json }}"
      set_fact:
        restic_diffs: "{{ restic_diffs | default([]) + [restic_status.action + ': ' + restic_status.item] }}"
      with_items: "{{ dryrun_result.stdout_lines | default([]) }}"
      loop_control:
        loop_var: restic_stdout_line

    - name: "{{ repo }}: Diff"
      debug:
        msg: "{{ restic_diffs }}"

    - name: "{{ repo }}: Backup"
      shell: restic backup {{ restic_excludes_params }} {{ src }}
      environment:
        RESTIC_REPOSITORY: "{{ repo }}"
        RESTIC_PASSWORD: "{{ restic_password }}"
  when: repo_base_result.stat.exists or (not repo_base_result.stat.exists and not skip_backup_if_repo_missing)

